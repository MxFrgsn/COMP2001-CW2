# swagger.yml
openapi: 3.0.0
info:
  title: 'CW2 Coursework'
  description: 'Trail Service Microservice'
  version: '1.0.1'

servers:
 - url: '/api' 
 #- url: 'http://cent-5-534.uopnet.plymouth.ac.uk/COMP2001/MFerguson/'


components:
  schemas:
    Trail:
      type: object
      required:
        - trail_name
        - difficulty
        - length
        - traffic
        - owner_id
        - location
      properties:
        trail_id:
          type: string
          description: 'Unique identifier for the trail'
          maxLength: 8
          pattern: '^TRL\d{5}$'
        trail_name:
          type: string
          description: 'Name of the trail'
          minLength: 5
          maxLength: 255
        difficulty:
          type: string
          description: 'Difficulty level of the trail'
          enum:
            - easy
            - moderate
            - hard
        length:
          type: number
          format: float
          description: 'Length of the trail in kilometers'
          minimum: 0.0
          maximum: 99999.99
        traffic:
          type: string
          description: 'Expected traffic on the trail'
          enum:
            - light
            - moderate
            - heavy
        duration:
          type: string
          description: 'Approximate duration to complete the trail'
          pattern: '^\d{2}:\d{2}$'
        elevation_gain:
          type: integer
          description: 'Elevation gain in meters'
          minimum: 0
          maximum: 9999
        route_type:
          type: string
          description: 'Type of route, e.g., loop, out-and-back, etc.'
          enum:
            - loop
            - out and back
            - point to point
        summary:
          type: string
          description: 'Short summary of the trail'
          minLength: 10
          maxLength: 255
          nullable: true
        description:
          type: string
          description: 'Detailed description of the trail'
          minLength: 100
          maxLength: 1500
          nullable: true
        owner_id:
          type: string
          description: 'Unique identifier of the trail owner'
          maxLength: 8
          pattern: '^USR\d{5}$'
        location:
          type: string
          description: 'Location of the trail'
          maxLength: 255
        location_pt_1:
          type: string
          description: 'First point of the trail location'
          maxLength: 8
          pattern: '^LPT\d{5}$'
        location_pt_2:
          type: string
          description: 'Second point of the trail location'
          maxLength: 8
          pattern: '^LPT\d{5}$'
        location_pt_3:
          type: string
          description: 'Third point of the trail location'
          maxLength: 8
          pattern: '^LPT\d{5}$'
        location_pt_4:
          type: string
          description: 'Fourth point of the trail location'
          maxLength: 8
          pattern: '^LPT\d{5}$'
        location_pt_5:
          type: string
          description: 'Fifth point of the trail location'
          maxLength: 8
          pattern: '^LPT\d{5}$'
    Trail_Update:
      type: object
      properties:
        trail_name:
          type: string
          description: 'Name of the trail'
          minLength: 5
          maxLength: 255
        difficulty:
          type: string
          description: 'Difficulty level of the trail'
          enum:
            - easy
            - moderate
            - hard
        length:
          type: number
          format: float
          description: 'Length of the trail in kilometers'
          minimum: 0.0
          maximum: 99999.99
        traffic:
          type: string
          description: 'Expected traffic on the trail'
          enum:
            - light
            - moderate
            - heavy
        duration:
          type: string
          description: 'Approximate duration to complete the trail'
          pattern: '^\d{2}:\d{2}$'
        elevation_gain:
          type: integer
          description: 'Elevation gain in meters'
          minimum: 0
          maximum: 9999
        route_type:
          type: string
          description: 'Type of route, e.g., loop, out-and-back, etc.'
          enum:
            - loop
            - out and back
            - point to point
        summary:
          type: string
          description: 'Short summary of the trail'
          minLength: 10
          maxLength: 255  
          nullable: true
        description:
          type: string
          description: 'Detailed description of the trail'
          minLength: 100
          maxLength: 1500
          nullable: true
        location:
          type: string
          description: 'Location of the trail'
          maxLength: 255
        location_pt_1:
          type: string
          description: 'First point of the trail location'
          maxLength: 8
          pattern: '^LPT\d{5}$'
        location_pt_2:
          type: string
          description: 'Second point of the trail location'
          maxLength: 8
          pattern: '^LPT\d{5}$'
        location_pt_3:
          type: string
          description: 'Third point of the trail location'
          maxLength: 8
          pattern: '^LPT\d{5}$'
        location_pt_4:
          type: string
          description: 'Fourth point of the trail location'
          maxLength: 8
          pattern: '^LPT\d{5}$'
        location_pt_5:
          type: string
          description: 'Fifth point of the trail location'
          maxLength: 8
          pattern: '^LPT\d{5}$'
    User_Update:
      type: object
      properties:
        username:
          type: string
          description: 'New username of the user'
          minLength: 3
          maxLength: 255
        email:
          type: string
          format: email
          pattern: ^[^@]+@[^@]+\.[^@]{2,}$
          description: ' New email address of the user'
          maxLength: 255
        password:
          type: string
          description: 'new Password of the user'
          minLength: 8
          maxLength: 255
        role:
          type: string
          description: 'new Role of the user'
          enum:
            - admin
            - user
    User:
      type: object
      required:
        - user_id
        - username
        - email
        - password
        - role
      properties:
        user_id:
          type: string
          description: 'Unique identifier for the user'
          maxLength: 8
          pattern: '^USR\d{5}$'
        username:
          type: string
          description: 'Username of the user'
          minLength: 3
          maxLength: 255
        email:
          type: string
          format: email
          pattern: ^[^@]+@[^@]+\.[^@]{2,}$
          description: 'Email address of the user'
          maxLength: 255
        password:
          type: string
          description: 'Password of the user'
          minLength: 8
          maxLength: 255
        role:
          type: string
          description: 'Role of the user'
          enum:
            - admin
            - user
    TrailAttraction:
      type: object
      required:
        - trail_id
        - attraction_id
      properties:
        trail_id:
          type: string
          description: 'Unique identifier of the trail'
          maxLength: 8
          pattern: '^LPT\d{5}$'
        attraction_id:
          type: string
          description: 'Unique identifier of the attraction'
          maxLength: 8
          pattern: '^ATT\d{5}$'
    Attraction:
      type: object
      required:
        - attraction_id
        - attraction_name
      properties:
        attraction_id:
          type: string
          description: 'Unique identifier for the attraction'
          maxLength: 8
          pattern: '^ATT\d{5}$'
        attraction_name:
          type: string
          description: 'Name of the attraction'
          minLength: 3
          maxLength: 255
    LocationPoint:
      type: object
      required:
        - location_point_id
        - latitude
        - longitude
      properties:
        location_point_id:
          type: string
          description: 'Unique identifier for the location point'
          maxLength: 8
          pattern: '^LPT\d{5}$'
        latitude:
          type: number
          format: float
          description: 'Latitude of the location point'
          minimum: -90.0
          maximum: 90.0
        longitude:
          type: number
          format: float
          description: 'Longitude of the location point'
          minimum: -180.0
          maximum: 180.0
        description:
          type: string
          description: 'Description of the location point'
          minLength: 3
          maxLength: 255
    LocationPoint_Update:
      type: object
      properties:
        description:
            type: string
            description: 'New description of the location point'
            minLength: 3
            maxLength: 255
        latitude:
          type: number
          format: float
          description: 'New latitude of the location point'
          minimum: -90.0
          maximum: 90.0
        longitude:
          type: number
          format: float
          description: 'New longitude of the location point'
          minimum: -180.0
          maximum: 180.0
    User_Authentication:
      type: object
      required:
        - email
        - password
      properties: 
        email:
          type: string
          description: 'Username of the user'
          maxLength: 255
        password:
          type: string
          description: 'Password of the user'
          minLength: 8
          maxLength: 255
  parameters:
    trail_id:
      name: 'trail_id'
      in: 'path'
      description: 'Unique identifier of the trail to search for'
      required: false
      schema:
        type: string
    user_id:
      name: 'user_id'
      in: 'path'
      description: 'Unique identifier of the user to search for'
      required: false
      schema:
        type: string
    attraction_id:
      name: 'attraction_id'
      in: 'path'
      description: 'Unique identifier of the attraction to search for'
      required: false
      schema:
        type: string
    location_point_id:
      name: 'location_point_id'
      in: 'path'
      description: 'Unique identifier of the location point to search for'
      required: false
      schema:
        type: string
    name:
      name: 'name'
      in: 'query'
      description: 'Filter by name'
      required: false
      schema:
        type: string
paths:
  /trails:
    get:
      operationId: 'trail.read_all'
      tags:
        - 'trails'
      summary: Get a list of trails
      parameters:
       - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: Successfully retrieved list of trails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trail'
        '400':
          description: Request failed, please retry.
    post:
      operationId: 'trail.create' 
      tags:
        - 'trails'
      summary: Create a new trail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trail'
      responses:
        '201':
          description: Trail created successfully
        '400':
          description: Request failed, please retry.
  /trails/{trail_id}:
    get:
      operationId: 'trail.read_one'
      tags:
        - 'trails'
      summary: Get one trail by ID
      parameters:
        - $ref: '#/components/parameters/trail_id'
      responses:
        '200':
          description: Successful response, Trail exists
        '404':
          description: Trail not found
    delete:
      operationId: 'trail.delete'
      tags:
        - 'trails'
      summary: Delete a trail by ID
      parameters:
        - $ref: '#/components/parameters/trail_id'
      responses:
        '204':
          description: Trail deleted successfully
        '404':
          description: Trail not found
    patch:
      operationId: 'trail.update'
      tags:
        - 'trails'
      summary: Update a trail by ID 
      parameters:
        - $ref: '#/components/parameters/trail_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trail_Update'
      responses:
        '200':
          description: Trail updated successfully
        '404':
          description: Trail not found
  /authenicate:
    post: 
      operationId: 'user.authenication'
      tags:
        - 'users'
      summary: Logins a user using univeristy auth API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_Authentication'
      responses:
        '200':
          description: User logged in successfully
        '404':
          description: User not found
        '204':
          description: User authenticated successfully
  /users:
    get:
      operationId: 'user.read_all'
      tags:
        - 'users'
      summary: Get a list of users
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: Successfully retrieved list of users
        '400':
          description: Request failed, please retry.
    post:
      operationId: 'user.create'
      tags:
        - 'users'
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Request failed, please retry.
  /users/{user_id}:
    get:
      operationId: 'user.read_one'
      tags:
        - 'users'
      summary: Get one user by ID
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          description: Successful response, User exists
        '404':
          description: User not found
    delete:
      operationId: 'user.delete'
      tags:
        - 'users'
      summary: Delete a user by ID
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
    patch:
      operationId: 'user.update'
      tags:
        - 'users'
      summary: Update a user by ID
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_Update'
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found
  /trail_attraction: 
    get:
      operationId: 'trail_attraction.read_all'
      tags:
        - 'trail_attraction'
      summary: Get a list of trail attractions
      responses:
        '200':
          description: Successfully retrieved list of trail attractions
        '400':
          description: Request failed, please retry.
    post:
      operationId: 'trail_attraction.create'
      tags:
        - 'trail_attraction'
      summary: Create a new trail attraction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrailAttraction'
      responses:
        '201':
          description: Trail attraction created successfully
        '400':
          description: Request failed, please retry.
    delete:
      operationId: 'trail_attraction.delete'
      tags:
        - 'trail_attraction'
      summary: 'Delete one or all attractions tied to a trail'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/TrailAttraction'
              properties:
                delete_all:
                  type: boolean
                  description: 'Flag to delete all attractions linked to the trail'
                  example: true
              required:
                - trail_id
                - attraction_id
      responses:
        '204':
          description: 'Attraction(s) successfully deleted'
        '400':
          description: 'Bad Request, required fields are missing or invalid'
        '404':
          description: 'Not Found, trail or attraction not found'
  /trail_attraction/{id}:
    get:
      operationId: 'trail_attraction.read_attractions_or_trails'
      tags:
        - 'trail_attraction'
      summary: Retrieve all attractions tied to a trail or all trails tied to an attraction
      parameters:
        - name: 'id'
          in: 'path'
          description: 'The ID of either the trail or attraction, depending on the request type'
          required: true
          schema:
            type: string
        - name: 'type'
          in: 'query'
          description: 'Specify whether to fetch attractions tied to a trail or trails tied to an attraction.'
          required: true
          schema:
            type: string
            enum:
              - trail
              - attraction
      responses:
        '200':
          description: Successfully retrieved data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrailAttraction'
        '400':
          description: Request failed, please retry.
  /attractions:
    get:
      operationId: 'attraction.read_all'
      tags:
        - 'attractions'
      summary: Get a list of attractions
      parameters:
       - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: Successfully retrieved list of attractions
        '400':
          description: Request failed, please retry.
    post:
      operationId: 'attraction.create'
      tags:
        - 'attractions'
      summary: Create a new attraction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attraction'
      responses:
        '201':
          description: Attraction created successfully
        '400':
          description: Request failed, please retry.
  /attractions/{attraction_id}:
    get:
      operationId: 'attraction.read_one'
      tags:
        - 'attractions'
      summary: Get one attraction by ID
      parameters:
        - $ref: '#/components/parameters/attraction_id'
      responses:
        '200':
          description: Successful response, Attraction exists
        '404':
          description: Attraction not found
    patch:
      operationId: 'attraction.update'
      tags:
        - 'attractions'
      summary: Update an attraction by ID
      parameters:
        - $ref: '#/components/parameters/attraction_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attraction'
      responses:
        '200':
          description: Attraction updated successfully
        '404':
          description: Attraction not found
    delete:
      operationId: 'attraction.delete'
      tags:
        - 'attractions'
      summary: Delete an attraction by ID
      parameters:
        - $ref: '#/components/parameters/attraction_id'
      responses:
        '204':
          description: Attraction deleted successfully
        '404':
          description: Attraction not found
  /location_point:
    get:
      operationId: 'location_point.read_all'
      tags:
        - 'location_points'
      summary: Get a list of location points
      parameters:
       - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: Successfully retrieved list of location points
        '400':
          description: Request failed, please retry.
    post:
      operationId: 'location_point.create'
      tags:
        - 'location_points'
      summary: Create a new location point
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationPoint'
      responses:
        '201':
          description: Location point created successfully
        '400':
          description: Request failed, please retry.
  /location_point/{location_point_id}:
    get:
      operationId: 'location_point.read_one'
      tags:
        - 'location_points'
      summary: Get one location point by ID
      parameters:
        - $ref: '#/components/parameters/location_point_id'
      responses:
        '200':
          description: Successful response, Location point exists
        '404':
          description: Location point not found
    delete:
      operationId: 'location_point.delete'
      tags:
        - 'location_points'
      summary: Delete a location point by ID
      parameters:
        - $ref: '#/components/parameters/location_point_id'
      responses:
        '204':
          description: Location point deleted successfully
        '404':
          description: Location point not found
    patch:
      operationId: 'location_point.update'
      tags:
        - 'location_points'
      summary: Update a location point by IEQ
      parameters:
        - $ref: '#/components/parameters/location_point_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationPoint_Update'
      responses:
        '200':
          description: Location point updated successfully
        '404':
          description: Location point not found

  
